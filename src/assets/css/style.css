/* COLORS */
/* GRID */
/* FONT-SIZE */
*,
*::after,
*::before {
  margin: 0px;
  padding: 0px;
  box-sizing: inherit;
  /*force box-sizing property to be an inherited property amongst all selectors, effectively changing its default behavior. Our root for this property is now what we declare in the body selector */ }

html {
  min-height: 100%;
  font-size: 31.25%;
  /*Declare default font-size here so we can easily scale all padding and related font-sizing with rem values. We use 31.25% because we want to take the browser default of 16px and bring it down to a default of five.  
			 			this changes the definition of what a rem unit is */ }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%; } }
  @media (min-width: 48em) and (orientation: landscape) {
    html {
      font-size: 56.25%; } }
  @media (min-width: 30em) {
    html {
      font-size: 37.5%; } }

body {
  min-height: 100vh;
  box-sizing: border-box;
  /* Padding and border no longer included when we express size for elements. This is the only structural property included in the body. All other styles are typography related and thus can be found in _typograhy.scss */
  background-color: black; }

#root {
  height: 100vh; }

.App {
  min-height: 100vh; }

.fab {
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  position: fixed;
  transition: all .5s;
  background-image: linear-gradient(315deg, #000000 0%, #7f8c8d 74%); }
  .fab__main {
    height: 10rem;
    width: 10rem;
    bottom: 5%;
    right: calc(50% - 5rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__main {
        bottom: 3%;
        left: calc(8% - 5rem); } }
  .fab__icon {
    position: relative;
    margin-top: 5rem; }
    .fab__icon:active, .fab__icon:visited, .fab__icon:active::before, .fab__icon:visited::before, .fab__icon:active::after, .fab__icon:visited::after {
      text-decoration: none; }
    .fab__icon, .fab__icon::before, .fab__icon::after {
      width: 5rem;
      height: 3px;
      background-color: #fff;
      display: inline-block; }
    .fab__icon::before, .fab__icon::after {
      content: "";
      position: absolute;
      left: 0;
      transition: all .2s; }
    .fab__icon::before {
      top: -1.5rem; }
    .fab__icon::after {
      top: 1.5rem; }
  .fab:hover .fab__icon::before {
    top: -2rem; }
  .fab:hover .fab__icon::after {
    top: 2rem; }
  .fab__checkbox {
    display: none; }
  .fab__checkbox:checked + .fab {
    background-color: #000000;
    background-image: linear-gradient(315deg, #000000 0%, #7f8c8d 74%);
    transition: all .5s; }
  .fab__checkbox:checked + .fab .fab__icon {
    background-color: transparent; }
  .fab__checkbox:checked + .fab .fab__icon::before {
    top: 0;
    transform: rotate(135deg);
    background-color: #1ebba3; }
  .fab__checkbox:checked + .fab .fab__icon::after {
    top: 0;
    transform: rotate(-135deg);
    background-color: #1ebba3; }

/* The <MenuItem> component makes use of .fab, which is already defined in _mainButton.scss */
.fab__item {
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  position: fixed;
  transition: all .5s;
  height: 6rem;
  width: 6rem; }
  .fab__item--1 {
    bottom: 4.5%;
    right: calc(25% - 3rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__item--1 {
        bottom: 5%;
        left: calc(85% - 3rem); } }
  .fab__item--2 {
    bottom: 13%;
    right: calc(35% - 3rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__item--2 {
        bottom: 5%;
        left: calc(70% - 3rem); } }
  .fab__item--3 {
    bottom: 20%;
    left: calc(50% - 3rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__item--3 {
        bottom: 5%;
        left: calc(55% - 3rem); } }
  .fab__item--4 {
    bottom: 13%;
    left: calc(35% - 3rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__item--4 {
        bottom: 5%;
        left: calc(40% - 3rem); } }
  .fab__item--5 {
    bottom: 4.5%;
    left: calc(25% - 3rem); }
    @media (min-width: 30em) and (orientation: landscape) {
      .fab__item--5 {
        bottom: 5%; } }
  .fab__item__icon {
    position: relative;
    margin-top: 2.5rem;
    transform: scale(3);
    color: #1ebba3;
    background: #360033;
    /* fallback for old browsers */
    background: -webkit-linear-gradient(to right, #0b8793, #360033);
    /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to right, #0b8793, #360033);
    /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent; }

#nav ul li {
  transition: all 2s; }

#nav ul li i {
  display: block; }

#nav ul li:hover i {
  display: none; }

#nav ul li a {
  display: none; }

#nav ul li:hover a {
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.6rem;
  font-weight: 2rem;
  color: white;
  text-decoration: none; }

.mobileNav {
  position: fixed;
  height: 20%; }

.navbar {
  height: 100%; }
  .navbar__container {
    margin: 0 !important; }
    .navbar__container--top, .navbar__container--bottom {
      height: 6vh; }
    .navbar__container--bottom {
      display: block;
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0; }
    .navbar__container--left, .navbar__container--right {
      height: 88vh;
      width: 6vh; }
    .navbar__container--left {
      float: left; }
    .navbar__container--right {
      float: right; }
  .navbar__bg {
    height: 100%;
    background-color: rgba(83, 88, 87, 0.6);
    display: flex; }
  .navbar__link {
    display: flex;
    font-size: 3rem;
    width: 100%;
    height: 100%; }

#dr1 li, #dr3 li {
  justify-content: center;
  align-items: center; }

#dr2 ul, #dr4 ul {
  flex-direction: column; }

#dr2 li, #dr4 li {
  justify-content: center;
  align-items: center; }

#dragItem {
  width: 100%;
  height: 100%; }

.navbar__bg {
  background-color: rgba(83, 88, 87, 0.6); }

.row {
  max-width: 100%;
  margin: 0 auto;
  display: flex; }
  .row:not(:last-child) {
    /* The not pseudo-class will select everything except for what we specify. In this case, every child but the last child of row. */
    margin-bottom: 4rem; }
  .row::after::after {
    content: "";
    display: table;
    clear: both; }

[class^="col-"] {
  /*added caret is what specifies the behavior of selecting all classes beginning with the given phrase. If it were simply just class = "col-", it would take that literally and nothing would be selected. */
  float: left;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  flex-basis: 100%; }
  [class^="col-"]:not(:last-child) {
    margin-right: 6rem; }

.col-twelfth {
  width: calc((100% - 11 * 6rem) / 12); }

.col-fiveTwelfths {
  width: calc(((100% - 11 * 6rem) / 12) * 5 + 4 * 6rem); }

.col-sevenTwelfths {
  width: calc(((100% - 11 * 6rem) / 12) * 7 + 6 * 6rem); }

.col-elevenTwelfths {
  width: calc(((100% - 11 * 6rem) / 12) * 11 + 10 * 6rem); }

.col-eleventh {
  width: calc((100% - 10 * 6rem) / 11); }

.col-twoElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 2 + 6rem); }

.col-threeElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 3 + 2 * 6rem); }

.col-fourElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 4 + 3 * 6rem); }

.col-fiveElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 5 + 4 * 6rem); }

.col-sixElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 6 + 5 * 6rem); }

.col-sevenElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 7 + 6 * 6rem); }

.col-eightElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 8 + 7 * 6rem); }

.col-nineElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 9 + 8 * 6rem); }

.col-tenElevenths {
  width: calc(((100% - 10 * 6rem) / 11) * 10 + 9 * 6rem); }

.col-tenth {
  width: calc((100% - 9 * 6rem) / 10); }

.col-threeTenths {
  width: calc(((100% - 9 * 6rem) / 10) * 3 + 2 * 6rem); }

.col-sevenTenths {
  width: calc(((100% - 9 * 6rem) / 10) * 7 + 6 * 6rem); }

.col-nineTenths {
  width: calc(((100% - 9 * 6rem) / 10) * 9 + 8 * 6rem); }

.col-ninth {
  width: calc((100% - 8 * 6rem) / 9); }

.col-twoNinths {
  width: calc(((100% - 8 * 6rem) / 9) * 2 + 6rem); }

.col-fourNinths {
  width: calc(((100% - 8 * 6rem) / 9) * 4 + 3 * 6rem); }

.col-fiveNinths {
  width: calc(((100% - 8 * 6rem) / 9) * 5 + 4 * 6rem); }

.col-sevenNinths {
  width: calc(((100% - 8 * 6rem) / 9) * 7 + 6 * 6rem); }

.col-eightNinths {
  width: calc(((100% - 8 * 6rem) / 9) * 8 + 7 * 6rem); }

.col-eighth {
  width: calc((100% - 7 * 6rem) / 8); }

.col-threeEighths {
  width: calc(((100% - 7 * 6rem) / 8) * 3 + 2 * 6rem); }

.col-fiveEighths {
  width: calc(((100% - 7 * 6rem) / 8) * 5 + 4 * 6rem); }

.col-sevenEighths {
  width: calc(((100% - 7 * 6rem) / 8) * 7 + 6 * 6rem); }

.col-seventh {
  width: calc((100% - 6 * 6rem) / 7); }

.col-twoSevenths {
  width: calc(((100% - 6 * 6rem) / 7) * 2 + 6rem); }

.col-threeSevenths {
  width: calc(((100% - 6 * 6rem) / 7) * 3 + 2 * 6rem); }

.col-fourSevenths {
  width: calc(((100% - 6 * 6rem) / 7) * 4 + 3 * 6rem); }

.col-fiveSevenths {
  width: calc(((100% - 6 * 6rem) / 7) * 5 + 4 * 6rem); }

.col-sixSevenths {
  width: calc(((100% - 6 * 6rem) / 7) * 6 + 5 * 6rem); }

.col-sixth {
  width: calc((100% - 5 * 6rem) / 6); }

.col-fiveSixths {
  width: calc(((100% - 5 * 6rem) / 6) * 5 + 4 * 6rem); }

.col-fifth {
  width: calc((100% - 4 * 6rem) / 5); }

.col-twoFifths {
  width: calc(((100% - 4 * 6rem) / 5) * 2 + 6rem); }

.col-threeFifths {
  width: calc(((100% - 4 * 6rem) / 5) * 3 + 2 * 6rem); }

.col-fourFifths {
  width: calc(((100% - 4 * 6rem) / 5) * 4 + 3 * 6rem); }

.col-fourth {
  width: calc((100% - 3 * 6rem) / 4); }

.col-threeFourths {
  width: calc(((100% - 3 * 6rem) / 4) * 3 + 2 * 6rem); }

.col-third {
  width: calc((100% - 2 * 6rem) / 3); }

.col-twoThirds {
  width: calc(((100% - 2 * 6rem) / 3) * 2 + 6rem); }

.col-half {
  width: calc((100% - 6rem) / 2);
  /* in order t0 use a SASS variable in calc we need to wrap our usual variable in curly brackets and precede those set of braackets with a # */ }

.headContainer {
  height: 8rem; }

.fullWindow {
  min-height: 100vh; }

.logo {
  height: 100%;
  width: 27.9rem; }
